#+PROPERTY: header-args :tangle ~/.emacs.d/elisp/org/07-functions.el

* Custom Org Functions
This file contains all custom helper functions related to Org mode.

#+begin_src emacs-lisp
  ;; --- Custom Functions for Org ---
  (defun my/org-insert-key-macro ()
    "Insert {{{key-cap()}}} and place point inside."
    (interactive)
    (insert "{{{key-cap()}}}")
    (backward-char 4))

  (defun my/org-insert-html-strong ()
    "Insert an Org HTML '<strong>' tag and position point inside."
    (interactive)
    (insert "@@html:<strong></strong>@@")
    (backward-char 11))

  (defun my/org-insert-html-emphasis ()
    "Insert an Org HTML '<em>' tag and position point inside."
    (interactive)
    (insert "@@html:<em></em>@@")
    (backward-char 9))

  (defun my/org-insert-dynamic-variable ()
    "Prompt for a variable label and name, create a placeholder using a prefix,
  add it to the kill-ring, and insert the necessary HTML/JS."
    (interactive)
    (let* ((label (read-from-minibuffer "Input Label (e.g., Windows Username): "))
           (variable-name (read-from-minibuffer "Variable Name (e.g., USERNAME): "))
           ;; Use a prefix-based format
           (placeholder (format "DYNAMIC_VAR_%s" variable-name))
           (input-id (concat (replace-regexp-in-string
                              "[^a-zA-Z0-9-]+" ""
                              (replace-regexp-in-string " " "-" (downcase label)))
                             "-input")))
      (kill-new placeholder)
      (message "Placeholder \"%s\" copied to kill-ring. Use C-y to yank." placeholder)
      (insert
       (format
        "#+HTML: <div class=\"dynamic-variable-input\">
  ,#+HTML:   <label for=\"%s\">%s:</label>
  ,#+HTML:   <input type=\"text\" id=\"%s\" placeholder=\"Enter your %s here...\">
  ,#+HTML: </div>

  ,#+HTML: <script>document.addEventListener('DOMContentLoaded', function() { createVariableInputHandler('%s', '%s'); });</script>
  "
        input-id label input-id label input-id placeholder))))

  (defun my/org-insert-search-link ()
    "Insert an org-mode search link that will open a new tab."
    (interactive)
    (let* ((placeholder-text (read-string "Enter placeholder text: "))
           (search-query (read-string "Enter search query: "))
           ;; Convert spaces to underscores and encode for URL
           (encoded-query (replace-regexp-in-string " " "_" search-query)))
      (insert (format "#+ATTR_HTML: :target _blank\n[[https://duckduckgo.com/?q=%s][%s]] in your browser to find the official repository"
                      encoded-query
                      placeholder-text))))

  (defun my-org-set-title-from-filename (backend)
    "Set the Org-mode title from the current buffer's filename."
    (when (eq major-mode 'org-mode)
      (let ((filename (buffer-file-name)))
        (when filename
          (let ((title-str (file-name-sans-extension (file-name-nondirectory filename))))
            (setq org-html-title-prefix (list title-str)))))))

  (defun my-org-export-update-asset-paths (backend)
    "Dynamically calculate relative paths for local HTML previews (C-c C-e h h)."
    (when (and (eq backend 'html) (buffer-file-name))
      (let* ((asset-dir (expand-file-name "~/coppermind/assets/"))
             (current-dir (file-name-directory (buffer-file-name)))
             (relative-path (file-relative-name asset-dir current-dir))
             (css-path (concat relative-path "css/site-style.css"))
             (nav-js-path (concat relative-path "js/site-nav.js"))
             (dyn-vars-js-path (concat relative-path "js/dynamic-variables.js")))
        (setq-local org-html-head-extra
                    (concat
                     (format "<link rel=\"stylesheet\" type=\"text/css\" href=\"%s\"/>\n" css-path)
                     (format "<script defer type=\"text/javascript\" src=\"%s\"></script>\n" nav-js-path)
                     (format "<script type=\"text/javascript\" src=\"%s\"></script>" dyn-vars-js-path))))))
#+end_src
