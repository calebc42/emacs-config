#+TITLE: Master Emacs Configuration
#+PROPERTY: header-args :tangle ~/.emacs.d/config.el

This file tangles the main `config.el` loader. The loader adds the `elisp`
directory to the load path and then loads all the modular configuration files in order.

* Bootstrap
#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-

(global-set-key (kbd "<f5>") #'my/build-config)

(defun my/build-config ()
  "Tangle config.org → config.el and byte-compile it."
  (interactive)
  (let* ((org-file (expand-file-name "config.org" "~/coppermind/emacs"))
         (dest-el  (expand-file-name "config.el"  user-emacs-directory))
         (script   (expand-file-name "shell/scripts/emacs-build-config.sh" "~/coppermind")))
    ;; Run the external script
    (unless (file-executable-p script)
      (error "Script not found or not executable: %s" script))
    (with-temp-buffer
      (shell-command script))))
#+end_src

* Package Management
This section sets up `use-package`, which is essential for managing the rest of the configuration.

#+begin_src emacs-lisp
;; Performance Management.
(setq gc-cons-threshold (* 100 1024 1024)) ; 100MB
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold (* 20 1024 1024)))) ; 20MB after startup

;; Ensure the 'use-package' macro is available.
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

;; Load use-package and configure it to automatically install missing packages.
(require 'use-package)
(setq use-package-always-ensure t
      use-package-expand-minimally t
      use-package-compute-statistics t)
#+end_src

* Development Tools & Workflow
** Completion Stack
Configuration for a modern completion system using Vertico, Consult, and Embark.

#+begin_src emacs-lisp
;; A modern, efficient completion UI for the minibuffer.
(use-package vertico
  :init
  (vertico-mode))

;; Display helpful annotations in the completion buffer.
(use-package marginalia
  :after vertico
  :config
  (marginalia-mode))

;; Use a more flexible, orderless completion style.
(use-package orderless
  :custom
  (completion-styles '(orderless basic)))

;; Provides useful commands for searching and navigation.
(use-package consult)

;; The "act" keymap for taking actions on completions.
(use-package embark
  :bind
  (("C-." . embark-act)
   ("M-." . embark-dwim)))

(use-package embark-consult
  :after (embark consult))

(use-package savehist
  :config (savehist-mode 1))

(use-package recentf
  :config
  (recentf-mode 1)
  (setq recentf-max-saved-items 100))
#+end_src

** Source-Block Export Support
Packages needed for exporting source code nicely.

#+begin_src emacs-lisp
;; Ensures code blocks are correctly colorized in HTML exports.
(use-package htmlize)

;; Adds support for PowerShell syntax.
(use-package powershell)
#+end_src

** LSP / Snippets / Dev Tools
#+begin_src emacs-lisp
;; Language Server Protocol support
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :init (setq lsp-keymap-prefix "C-c l"))

(use-package lsp-ui
  :after lsp-mode
  :commands lsp-ui-mode)

;; Infastructure as Code
(use-package terraform-mode
  :hook (terraform-mode . lsp-deferred))

(use-package ansible
  :defer t)

;; Snippet expansion
(use-package yasnippet
  :config
  (let ((snippet-dir "~/coppermind/snippets"))
    (unless (file-directory-p snippet-dir)
      (make-directory snippet-dir t))
    (yas-load-directory snippet-dir))
  (yas-global-mode 1))

;; On-the-fly syntax checking
(use-package flycheck
  :config (global-flycheck-mode))
#+end_src

** Version Control
#+begin_src emacs-lisp
(use-package magit
  :bind (("C-x g" . magit-status)
         :map magit-mode-map
         ("R" . (lambda () (interactive)
                  (magit-run-git-async "rad" "push")))))
#+end_src

* Org Mode Configuration
All Org mode configuration, including core settings, custom functions, and publishing,
is consolidated here to ensure correct load order.

#+begin_src emacs-lisp
(use-package org
  :bind (("C-c c" . org-capture)
         ("C-c a" . org-agenda)
         ("C-c h k" . my/org-insert-key-macro)
         ("C-c h s" . my/org-insert-html-strong)
         ("C-c h e" . my/org-insert-html-emphasis)
         ("C-c h l" . my/org-insert-search-link))
  :config
  ;; --- 1. Core Settings ---
  (setq org-directory             "~/coppermind"
        org-agenda-files          '("~/coppermind")
        org-ellipsis              " ▾"
        org-startup-indented      t
        org-default-notes-file    (expand-file-name "inbox.org" org-directory))

  (add-hook 'org-mode-hook #'flyspell-mode)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell      . t)
     (emacs-lisp . t)))

  ;; --- Custom Functions (Define them BEFORE they are used) ---
  (defun my-org-export-update-asset-paths (backend)
    "Dynamically calculate relative paths for local HTML previews."
    (when (eq backend 'html)
      (let* ((asset-dir (expand-file-name "~/coppermind/assets/"))
             (current-dir (if (buffer-file-name)
                             (file-name-directory (buffer-file-name))
                           default-directory))
             (relative-path (file-relative-name asset-dir current-dir))
             (css-path (concat relative-path "css/site-style.css"))
             (nav-js-path (concat relative-path "js/site-nav.js"))
             (dyn-vars-js-path (concat relative-path "js/dynamic-variables.js")))
        
        ;; Set as buffer-local variable for this export
        (setq-local org-html-head-extra
                    (concat
                     (format "<link rel=\"stylesheet\" type=\"text/css\" href=\"%s\"/>\n" css-path)
                     (format "<script defer type=\"text/javascript\" src=\"%s\"></script>\n" nav-js-path)
                     (format "<script type=\"text/javascript\" src=\"%s\"></script>\n" dyn-vars-js-path)))
        
        ;; Debug output
        (message "Dynamic assets: CSS=%s, Nav=%s, Vars=%s" css-path nav-js-path dyn-vars-js-path))))

  ;; Better hook - runs during the export process when variables are actually used
  (defun my-org-export-filter-options (backend)
    "Set up asset paths during export."
    (my-org-export-update-asset-paths backend))

  ;; --- Add Hooks AFTER Functions are Defined ---
  (add-hook 'org-export-before-processing-hook #'my-org-export-filter-options)
  (add-hook 'org-export-before-parsing-hook #'my-org-export-filter-options)

  ;; --- Publishing Configuration ---
  (defun my-publish-to-html-with-dynamic-paths (plist filename pub-dir)
    "Publishes a file to HTML with properly calculated asset paths."
    ;; Check if file should be published (has EXPORT_FILE_NAME property)
    (let ((should-publish (with-temp-buffer
                            (insert-file-contents filename)
                            (goto-char (point-min))
                            (org-entry-get (point-min) "EXPORT_FILE_NAME"))))
      (when should-publish
        ;; Calculate paths dynamically
        (let* ((asset-dir (expand-file-name "~/coppermind/assets/"))
               (source-dir (file-name-directory filename))
               (relative-path (file-relative-name asset-dir source-dir))
               (css-path (concat relative-path "css/site-style.css"))
               (nav-js-path (concat relative-path "js/site-nav.js"))
               (dyn-vars-js-path (concat relative-path "js/dynamic-variables.js"))
               ;; Create the head extra content
               (head-extra (concat
                            (format "<link rel=\"stylesheet\" type=\"text/css\" href=\"%s\"/>\n" css-path)
                            (format "<script defer type=\"text/javascript\" src=\"%s\"></script>\n" nav-js-path)
                            (format "<script type=\"text/javascript\" src=\"%s\"></script>" dyn-vars-js-path)))
               ;; Merge with any existing head extra from plist
               (final-plist (plist-put (copy-sequence plist) :html-head-extra head-extra)))
          
          ;; Debug info
          (message "Publishing %s with assets from %s" filename relative-path)
          
          ;; Call the original HTML publish function with our modified plist
          (org-html-publish-to-html final-plist filename pub-dir)))))

  (setq org-publish-project-alist
        (let ((output-dir "~/calebc42-site/"))
          `(("resume"
             :base-directory "~/coppermind/career/"
             :base-extension "org"
             :include ("resume.org")
             :publishing-directory ,output-dir
             :recursive nil
             :publishing-function my-publish-to-html-with-dynamic-paths
             :html-postamble "<p class=\"author\">Author: %a</p><p class=\"date\">Last modified: %T</p>")
            ("projects"
             :base-directory "~/coppermind/project-codex/"
             :base-extension "org"
             :publishing-directory ,(concat output-dir "projects/")
             :recursive t
             :publishing-function my-publish-to-html-with-dynamic-paths
             :html-postamble "<p class=\"author\">Author: %a</p><p class=\"date\">Last modified: %T</p>")
            ("digital-garden"
             :base-directory "~/coppermind/"
             :base-extension "org"
             :publishing-directory ,(concat output-dir "garden/")
             :recursive t
             :exclude "resume\\.org"
             :exclude-tags ("private")
             :exclude ,(regexp-opt '("assets" "data" "emacs"))
             :publishing-function my-publish-to-html-with-dynamic-paths
             :html-postamble "<p class=\"author\">Author: %a</p><p class=\"date\">Last modified: %T</p>")
            ("static-assets"
             :base-directory "~/coppermind/assets/"
             :base-extension "css\\|js\\|png\\|jpg\\|gif\\|svg"
             :publishing-directory ,(concat output-dir "assets/")
             :publishing-function 'org-publish-attachment
             :recursive t)
            ("calebc42.com" :components ("resume" "projects" "digital-garden" "static-assets"))))))
#+end_src

** Org-Roam
#+begin_src emacs-lisp
(use-package org-roam
  :init
  ;; Ensure sqlite3 is available for Org-Roam
  (when (executable-find "sqlite3")
    (setq emacsql-sqlite-executable (executable-find "sqlite3")))
  :hook (after-init . org-roam-db-autosync-mode)
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture))
  :config
  (setq org-roam-directory           (expand-file-name "~/coppermind/")
        org-roam-db-location         (expand-file-name "org-roam.db" org-roam-directory)
        org-roam-node-display-template
        (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))

  (setq org-roam-file-exclude-regexp
        '("/assets/"
          "/data/"))

  (setq org-roam-capture-templates
        '(("d" "default" plain "%?"
           :target (file+head "${slug}.org"
                              "#+title: ${title}\n#+date: %U\n\n")
           :unnarrowed t)))

  (use-package org-roam-ui
    :after org-roam
    :bind ("C-c n u" . org-roam-ui-mode)))
#+end_src

** Org-Transclusion
#+begin_src emacs-lisp
(use-package org-transclusion
  :after org
  :bind (("C-c n t" . org-transclusion-add)
         ("C-c n T" . org-transclusion-mode))
  :config (add-hook 'org-mode-hook #'org-transclusion-mode))
#+end_src

* Final UI and Customization
** User Interface
#+begin_src emacs-lisp
;; Load a theme for a better visual experience.
(load-theme 'misterioso t)

;; Enable global line numbers and visual line wrapping for readability.
(global-display-line-numbers-mode)
(global-visual-line-mode 1)
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))

;; Set the initial and default window size and position.
(setq initial-frame-alist  '((top . 10) (left . -640) (width . 105) (height . 70)))
(setq default-frame-alist  '((top . 10) (left . -640) (width . 105) (height . 50)))
#+end_src
